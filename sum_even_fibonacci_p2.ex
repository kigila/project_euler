defmodule SumEvenFibonacciP2 do
  @moduledoc """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
      1, 2, 3, 4, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
  """
  require Integer


  @doc """
    Returm the sum of all fibonancce even-value term inferior to 4 millions
  """
  def sum_even_fibonacci() do
    fib_stream()
    |> Stream.take_while(&(&1 <= 4_000_000))
    |> Stream.filter(&Integer.is_even/1)
    |> Enum.sum()
  end

  def fib_stream() do
    Stream.unfold({1, 2}, fn {a, b} -> {a, {b, a + b}} end)
  end


  @doc """
  this function return the fibonacci sequence. ** Atention!** It has a problem of time complexity for large numbers
  """
  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n) when n > 1 do
    fib(n - 1) + fib(n - 2)
  end
end
